"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantSchema = exports.TenantConfigSchema = exports.BookingSchema = exports.BookingCreateRequestSchema = exports.SchemaSchema = exports.SchemaCreateRequestSchema = exports.SchemaDataSchema = exports.SchemaRuleWeeklySchema = exports.SchemaRuleDailySchema = exports.SchemaSlotSchema = exports.ErrorSchema = exports.ResourceSchema = exports.ResourceCreateRequestSchema = exports.ResourceILoqSchema = exports.ResourceILoqDataSchema = exports.ModelSchema = void 0;
exports.ModelSchema = {
    type: 'object',
    required: ['id', 'tenant_id', 'created_at', 'updated_at'],
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tenant_id: {
            type: 'string',
            example: 'acme'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            type: 'string',
            format: 'date-time'
        }
    }
};
exports.ResourceILoqDataSchema = {
    title: 'ResourceILoqData',
    type: 'object',
    required: ['calendar_id', 'network_module'],
    properties: {
        calendar_id: {
            type: 'string',
            description: 'refers to ILoq /api/v2/CalendarDataTitle'
        },
        network_module: {
            type: 'object',
            required: ['id', 'device_id', 'relay_id'],
            properties: {
                id: {
                    type: 'string',
                    description: 'refers to ILoq /api/v2/NetworkModule'
                },
                device_id: {
                    type: 'string',
                    description: 'refers to ILoq /api/v2/NetworkModuleDevice'
                },
                relay_id: {
                    type: 'string',
                    description: 'refers to ILoq /api/v2/NetworkModuleRelay'
                }
            }
        }
    }
};
exports.ResourceILoqSchema = {
    title: 'ResourceILoq',
    type: 'object',
    required: ['type', 'data'],
    properties: {
        type: {
            type: 'string',
            enum: ['iloq']
        },
        data: {
            '$ref': '#/components/schemas/ResourceILoqData'
        }
    }
};
exports.ResourceCreateRequestSchema = {
    title: 'ResourceCreateRequest',
    oneOf: [
        {
            '$ref': '#/components/schemas/ResourceILoq'
        }
    ],
    discriminator: {
        propertyName: 'type',
        mapping: {
            iloq: '#/components/schemas/ResourceILoq'
        }
    }
};
exports.ResourceSchema = {
    title: 'Resource',
    allOf: [
        {
            '$ref': '#/components/schemas/Model'
        },
        {
            '$ref': '#/components/schemas/ResourceCreateRequest'
        }
    ]
};
exports.ErrorSchema = {
    title: 'Error',
    type: 'object',
    required: ['message', 'request_id'],
    properties: {
        message: {
            type: 'string',
            example: 'error message'
        },
        description: {
            type: 'string',
            example: 'error description'
        },
        request_id: {
            type: 'string',
            example: 'PbMtZxrFhLNciaVMndIZkdQMHyiKUerV'
        }
    }
};
exports.SchemaSlotSchema = {
    title: 'SchemaSlot',
    type: 'object',
    required: ['from', 'to'],
    properties: {
        from: {
            type: 'string',
            description: "24h time of day without seconds, i.e \"HH:mm\".\nhours > 24 allowed for timeslots that span\nacross midnight into the next day.\n",
            example: '04:00'
        },
        to: {
            type: 'string',
            description: "24h time of day without seconds, i.e \"HH:mm\".\nhours > 24 allowed for timeslots that span\nacross midnight into the next day.\n",
            example: '06:00'
        }
    }
};
exports.SchemaRuleDailySchema = {
    title: 'SchemaRuleDaily',
    type: 'object',
    required: ['type', 'slots'],
    properties: {
        type: {
            type: 'string',
            enum: ['daily']
        },
        slots: {
            type: 'array',
            minItems: 1,
            maxItems: 1,
            items: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/SchemaSlot'
                }
            }
        }
    }
};
exports.SchemaRuleWeeklySchema = {
    title: 'SchemaRuleDaily',
    type: 'object',
    required: ['type', 'slots'],
    properties: {
        type: {
            type: 'string',
            enum: ['weekly']
        },
        slots: {
            type: 'array',
            minItems: 7,
            maxItems: 7,
            items: {
                type: 'array',
                items: {
                    '$ref': '#/components/schemas/SchemaSlot'
                }
            }
        }
    }
};
exports.SchemaDataSchema = {
    title: 'SchemaData',
    oneOf: [
        {
            '$ref': '#/components/schemas/SchemaRuleDaily'
        },
        {
            '$ref': '#/components/schemas/SchemaRuleWeekly'
        }
    ],
    discriminator: {
        propertyName: 'type',
        mapping: {
            daily: '#/components/schemas/SchemaRuleDaily',
            weekly: '#/components/schemas/SchemaRuleWeekly'
        }
    }
};
exports.SchemaCreateRequestSchema = {
    title: 'SchemaCreateRequest',
    type: 'object',
    required: ['name', 'data'],
    properties: {
        name: {
            type: 'string',
            example: 'TvÃ¤ttstugor'
        },
        data: {
            type: 'object',
            '$ref': '#/components/schemas/SchemaData'
        }
    }
};
exports.SchemaSchema = {
    title: 'Schema',
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/Model'
        },
        {
            '$ref': '#/components/schemas/SchemaCreateRequest'
        }
    ]
};
exports.BookingCreateRequestSchema = {
    title: 'BookingCreateRequest',
    type: 'object',
    required: ['resource_id', 'booked_from', 'booked_to', 'booked_by', 'type'],
    properties: {
        resource_id: {
            type: 'string',
            format: 'uuid',
            description: 'The booked resource'
        },
        booked_from: {
            type: 'string',
            description: "24h time of day, i.e. \"HH:mm\".\nhours > 24 are allowed to indicate that a time slot spans\nacross midnight and into the next day\n",
            example: '04:00'
        },
        booked_to: {
            type: 'string',
            pattern: '^\\d{2}:\\d{2}$',
            description: "24h time of day, i.e. \"HH:mm\".\nhours > 24 are allowed to indicate that a time slot spans\nacross midnight and into the next day\n",
            example: '06:00'
        },
        booked_by: {
            type: 'string',
            description: "the party claiming the resource.\nformat may vary depending on resource type.\n"
        },
        type: {
            type: 'string',
            enum: ['user', 'service-window']
        }
    }
};
exports.BookingSchema = {
    title: 'Booking',
    allOf: [
        {
            '$ref': '#/components/schemas/Model'
        },
        {
            '$ref': '#/components/schemas/BookingCreateRequest'
        }
    ]
};
exports.TenantConfigSchema = {
    title: 'TenantConfig',
    type: 'object'
};
exports.TenantSchema = {
    title: 'Tenant',
    type: 'object',
    required: ['id', 'created_at', 'updated_at', 'name', 'config'],
    properties: {
        id: {
            type: 'string',
            example: 'kruthusen'
        },
        created_at: {
            type: 'string',
            format: 'datetime'
        },
        updated_at: {
            type: 'string',
            format: 'datetime'
        },
        name: {
            type: 'string',
            example: 'ACME Inc.'
        },
        config: {
            '$ref': '#/components/schemas/TenantConfig'
        }
    }
};
